@page "/"

@inject ISitecoreVersionPackageViewModelBuilder SitecoreVersionPackageViewModelBuilder

<h1>Available Sitecore Versions</h1>

<p>See: <a href="https://github.com/Sitecore/docker-images">Sitecore/docker-images</a></p>

@if (packages == null)
{
    <p><em>Loading...</em></p>
}
else
{
        @foreach (var version in versions)
        {
            <h2 class="card-title">Sitecore @version</h2>

            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Dependency</th>
                        <th scope="col">Description</th>
                        <th scope="col">URL</th>
                        <th scope="col">Installed on Server</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var package in packages.Where(x => x.Version == version))
                    {
                    <tr>
                        <th scope="row">@package.FileName</th>
                        <td>@package.Description</td>
                        @if (package.Url == new Uri("about:blank"))
                        {
                        <td>URL missing from Sitecore source repository</td>
                        }
                        else
                        {
                        <td><a href="@package.Url">Download Directly</a></td>
                        }
                        @if (package.Installed)
                        {
                            <td class="text-center"><span class="oi oi-circle-check" style="color:green;"></span></td>
                        }
                        else
                        {
                            <td class="text-center"><span class="oi oi-circle-x" style="color:red;"></span></td>
                        }
                    </tr>
                    }
                </tbody>
            </table>
        }

}

@code {
    private IList<SitecorePackageViewModel> packages;

    protected override async Task OnInitializedAsync()
    {
        packages = await SitecoreVersionPackageViewModelBuilder.GetAll();
    }

    private IList<string> versions;

    protected override void OnInitialized()
    {
        if (packages != null)
        {
            packages = null;
        }
        versions =  SitecoreVersionPackageViewModelBuilder.GetSitecoreVersions();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
}
